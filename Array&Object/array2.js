// 빅오 배열 메소드 (빅오표기관점)

// 끝에다가 추가, 삭제
// push, pop => O(1)

// 앞에다가 추가, 삭제 (인덱스 전부 정해줘야해서)
// shift, unshifh - O(n)

// 배열 합치기
// concat
// O(n + m) 이라고 볼수 있겠지만 결론적으로 => n
// 합할 배열이 늘어날수록 시간도 그만큼 늘어날것임

let arr1 = ["a", "b", "c"];
let arr2 = ["d", "e", "f"];

arr1.concat(arr); // ['a','b','c','d','e','f']

// 배열 자르기 (일부 또는 전체)
// slice
// 가져오는 배열이 늘어날수록 복사하는 시간도 늘어나게 됨 => n

//배열을 가져오고, 새로운 항목 추가
//splice
// 배열에 원하는 위치에 엘리먼트를 가져오거나 교체 할 수 있다.  일반적으로 O(n)
// 배열에 처음 또는 중간에 넣으면 인덱스 다시정리 ->   n

//sort -> O(n * log n) 가장느림!!
/// 배열을 정렬하는것은 O(n) 보다 크다는것을 알아야함
// 정렬하려면 한번씩 보는것만으로는 충분하지않다.

//forEach/map/filter/reduce/etc. -> O(n)

// 배열내장메소드는 대부분 O(n)
// push , pop 은 예외로
